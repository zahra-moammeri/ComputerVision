@ -0,0 +1,116 @@
# -*- coding: utf-8 -*-
"""bicubic

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J_zqeRTRKiZkB0kVVQ_TXZ1HzUyIwN8l
"""

from PIL import Image

import glob as glob
import os
import argparse

# construct the argument parser and parse the command line arguments.

parser = argparse.ArgumentParser()
parser.add_argument('-p', '--path', default='../input/Set14/original',
                    nargs= '+',
                    help='path to the high-res images to convert to low-res')
parser.add_argument('-s', '--scale-factor', dest='scale_factor', default='2x',
                    help='make low-res by how much factor',
                    choices=['2x','3x', '4x'])
args = vars(parser.parse_args())





paths = args['path']
images = []

for path in paths:
    print(f"Reading images from path: {path}")
    try:
        images.extend(glob.glob(f"{path}/*.png"))
    except Exception as e:
        print(f"Error reading images from path {path}: {e}")
        
print(len(images))

# select scaling-factor and set up directories according to that

if args['scale_factor'] == '2x':
  scale_factor = 0.5
  
  try:
    os.makedirs('../input/test_bicubic_rgb_2x', exist_ok=True)
  except Exception as e:
      print(f"Error creating directory ../input/test_bicubic_rgb_2x: {e}")
  save_path_lr = '../input/test_bicubic_rgb_2x'
  
  try:
    os.makedirs('../input/test_hr', exist_ok=True)
  except Exception as e:
      print(f'Error creating directory ../input/test_hr: {e}')
  save_path_hr = '../input/test_hr'


if args['scale_factor'] == '3x':
  scale_factor = 0.333
  
  try:
    os.makedirs('../input/test_bicubic_rgb_3x', exist_ok=True)
  except Exception as e:
    print(f'Error creating directory ../input/test_bicubic_rgb_3x: {e}')
  save_path_lr = '../input/test_bicubic_rgb_3x'
  
  try:
    os.makedirs('../input/test_hr', exist_ok=True)
  except Exception as e:
    print(f'Error creating directory ../input/test_hr: {e}')
  save_path_hr = '../input/test_hr'



if args['scale_factor'] == '4x':
  scale_factor = 0.25
  try:
    os.makedirs('../input/test_bicubic_rgb_4x', exist_ok=True)
  except Exception as e:
    print(f'Error creating directory ../input/test_bicubic_rgb_4x: {e}')
  save_path_lr = '../input/test_bicubic_rgb_4x'
  
  try:
    os.makedirs('../input/test_hr', exist_ok=True)
  except Exception as e:
    print(f'Error creating directory ../input/test_hr: {e}')
  save_path_hr = '../input/test_hr'

print(f"Saling factor: {args['scale_factor']}")
print(f"Low resolution images save path: {save_path_lr}")

"""
we create the directories to save low and high resolution images as per the scale factor. The
code contains the other options so that further experiments can be done easily.
"""

for image in images:
  orig_img = Image.open(image)
  image_name = image.split(os.path.sep)[-1]
  w, h = orig_img.size[:]
  print(f"original image dimensions: {w}, {h}")
  orig_img.save(f"{save_path_hr}/{image_name}")

  low_res_img = orig_img.resize((int(w*scale_factor), int(h*scale_factor)), Image.BICUBIC)
  #upscale using bicubic
  high_res_upscale = low_res_img.resize((w, h), Image.BICUBIC)
  high_res_upscale.save(f"{save_path_lr}/{image_name}")


"""
we read the image and save
the original and bicubic interpolated images to the corresponding folders.
"""